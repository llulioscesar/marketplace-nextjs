generator client {
  provider = "prisma-client-js"
  output   = "./src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CUSTOMER
  BUSINESS
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      UserRole
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  stores Store[] @relation("BusinessStores")
  orders Order[] @relation("CustomerOrders")

  @@index([email])
  @@index([role])
}

model Store {
  id          String   @id @default(cuid())
  name        String
  description String?
  slug        String   @unique
  imageUrl    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  businessId String
  business   User      @relation("BusinessStores", fields: [businessId], references: [id], onDelete: Cascade)
  products   Product[]
  orders     Order[]

  @@index([slug])
  @@index([businessId])
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Decimal  @db.Decimal(10, 2)
  stock       Int      @default(0)
  imageUrl    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  storeId    String
  store      Store       @relation(fields: [storeId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]

  @@index([storeId])
  @@index([isActive])
}

model Order {
  id          String      @id @default(cuid())
  orderNumber String      @unique @default(cuid())
  totalAmount Decimal     @db.Decimal(10, 2)
  status      OrderStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  customerId String
  customer   User        @relation("CustomerOrders", fields: [customerId], references: [id])
  storeId    String
  store      Store       @relation(fields: [storeId], references: [id])
  items      OrderItem[]

  @@index([customerId])
  @@index([storeId])
  @@index([status])
}

model OrderItem {
  id         String  @id @default(cuid())
  quantity   Int
  unitPrice  Decimal @db.Decimal(10, 2)
  totalPrice Decimal @db.Decimal(10, 2)

  // Relations
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}
